# 版本：2.3
# 修订原因：修复 `set-output` 弃用问题，使用 Environment Files 设置输出变量。
# 版本：2.2
# 修订原因：将“没有更改，跳过提交”的情况视为内容无变更的错误状态，并发送邮件报错。
# 版本：2.1
# 修订原因：在内容无更改时视为错误状态，并发送邮件报错。
# 版本：2.0
# 修订原因：工作流负责文件操作、错误捕获和邮件通知，邮件内容中具体描述错误类型。
# 版本：1.1
# 修订原因：Python 脚本仅用于获取目标网址和网址内容，不处理文件操作。
# 版本：1.0
# 修订原因：初始版本，实现抓取网页内容、提取目标网址功能。

name: Update v2cross

on:
  schedule:
    - cron: '5 16,22,4,10 * * *'  # UTC时间对应北京时间00:05, 06:05, 12:05, 18:05
  workflow_dispatch:

jobs:
  refresh:
    runs-on: ubuntu-latest

    steps:
      # 步骤1：检出仓库代码
      - name: 检出仓库代码
        uses: actions/checkout@v2

      # 步骤2：设置 Python 环境
      - name: 设置 Python 环境
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      # 步骤3：安装依赖
      - name: 安装依赖
        run: |
          python -m pip install --upgrade pip
          pip install requests beautifulsoup4 pyyaml

      # 步骤4：获取当前日期和时间（北京时间）
      - name: 获取当前日期和时间（北京时间）
        id: date
        run: |
          echo "CURRENT_DATE=$(TZ='Asia/Shanghai' date +'%Y-%m-%d %H:%M:%S')" >> $GITHUB_ENV

      # 步骤5：运行 Python 脚本
      - name: 运行 Python 脚本
        id: run_script
        run: |
          # 运行脚本，捕获输出内容
          output=$(python v2cross/update.py 2>&1)
          exit_code=$?
          echo "$output"  # 打印脚本输出
          if [ $exit_code -ne 0 ]; then
            echo "script_status=failure" >> $GITHUB_OUTPUT  # 使用 Environment Files 设置输出变量
            echo "error_message=$output" >> $GITHUB_OUTPUT  # 捕获错误信息
          else
            echo "script_status=success" >> $GITHUB_OUTPUT
            echo "url_content=$output" >> $GITHUB_OUTPUT  # 捕获目标网址内容
          fi

      # 步骤6：检查脚本状态
      - name: 检查脚本状态
        id: check_script
        run: |
          if [ "${{ steps.run_script.outputs.script_status }}" == "failure" ]; then
            echo "脚本运行失败。"
            echo "send_email=true" >> $GITHUB_OUTPUT  # 使用 Environment Files 设置输出变量
            echo "error_type=脚本运行失败" >> $GITHUB_OUTPUT  # 设置错误类型
          else
            echo "脚本运行成功。"
            echo "send_email=false" >> $GITHUB_OUTPUT
          fi

      # 步骤7：检查文件是否存在
      - name: 检查文件是否存在
        id: check_file
        run: |
          if [ -f v2cross/output.yaml ]; then
            echo "文件存在。"
            echo "file_exists=true" >> $GITHUB_OUTPUT  # 使用 Environment Files 设置输出变量
          else
            echo "文件不存在，创建文件。"
            mkdir -p v2cross
            touch v2cross/output.yaml
            echo "file_exists=false" >> $GITHUB_OUTPUT
          fi

      # 步骤8：检查内容是否有更新
      - name: 检查内容是否有更新
        id: check_content
        run: |
          if [ "${{ steps.run_script.outputs.script_status }}" == "success" ]; then
            # 读取现有内容
            existing_content=$(cat v2cross/output.yaml)
            # 获取新内容
            new_content="${{ steps.run_script.outputs.url_content }}"
            if [ "$existing_content" == "$new_content" ]; then
              echo "内容无变化。"
              echo "send_email=true" >> $GITHUB_OUTPUT  # 使用 Environment Files 设置输出变量
              echo "error_type=内容未更新" >> $GITHUB_OUTPUT  # 设置错误类型
            else
              echo "内容有变化，准备更新文件。"
              echo "send_email=false" >> $GITHUB_OUTPUT
            fi
          fi

      # 步骤9：提交更改（如果有更新）
      - name: 提交更改（如果有更新）
        id: commit_changes  # 为步骤设置一个 ID，便于后续引用
        if: steps.check_content.outputs.send_email == 'false'
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add v2cross/output.yaml
          if git diff --quiet && git diff --staged --quiet; then
            echo "没有更改，跳过提交。"
            echo "send_email=true" >> $GITHUB_OUTPUT  # 使用 Environment Files 设置输出变量
            echo "error_type=内容未更新" >> $GITHUB_OUTPUT  # 设置错误类型
          else
            # 拉取远程更改并合并
            git pull origin main --rebase
            # 提交更改
            git commit -m "Auto-update output.yaml"
            # 推送更改到主分支
            git push origin main
          fi

      # 步骤10：发送邮件通知（内容无变化或工作流失败时）
      - name: 发送邮件通知（内容无变化或工作流失败时）
        if: steps.check_script.outputs.send_email == 'true' || steps.check_content.outputs.send_email == 'true' || steps.commit_changes.outputs.send_email == 'true'
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.163.com
          server_port: 465
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "v2cross更新出错 ${{ env.CURRENT_DATE }}"
          body: |
            工作流运行状态：
            - 脚本版本: 2.3  # 邮件内容中的版本号同步更新
            - 日志链接: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
            - 错误类型: ${{ steps.check_script.outputs.error_type || steps.check_content.outputs.error_type || steps.commit_changes.outputs.error_type }}  # 具体描述错误类型
            - 错误信息: ${{ steps.run_script.outputs.error_message }}  # 捕获的错误信息
          to: lyqnihao@163.com
          from: ${{ secrets.EMAIL_USERNAME }}
          content_type: text/plain
