# 版本：1.2
# 修订原因：每日更新改为一次
# 版本：1.1
# 修订原因：
# 版本：1.0
# 这是一个用于每天自动更新 v2cross 订阅文件的 GitHub Actions 工作流。
# 功能包括：从 订阅URL 读取内容、Python 脚本仅用于获取目标网址和网址内容、内容检查、提交更改和邮件通知。

# GitHub Actions 工作流完整修正版
name: Update v2cross

on:
  schedule:
    #  - cron: '5 17,23,5,11 * * *'  # UTC时间对应 17:05, 23:05, 05:05, 11:05（北京次日01:05, 07:05, 13:05, 19:05）
      - cron: '5 17 * * *'  # UTC时间对应 17:05（北京次日01:05）
  workflow_dispatch:

jobs:
  refresh:
    runs-on: ubuntu-latest

    steps:
      # --------------------------
      # 步骤1：检出代码（保持原样）
      # --------------------------
      - name: 检出仓库代码
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # --------------------------
      # 步骤2：Python环境设置（保持原样）
      # --------------------------      
      - name: 设置 Python 环境
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      # --------------------------
      # 步骤3：安装依赖（保持原样）
      # --------------------------      
      - name: 安装依赖
        run: |
          python -m pip install --upgrade pip
          pip install requests beautifulsoup4 pyyaml

      # --------------------------
      # 步骤4：北京时间戳（保持原样）
      # --------------------------
      - name: 获取北京时间（用于时间戳）
        id: date
        run: |
          echo "CURRENT_DATE=$(TZ='Asia/Shanghai' date +'%Y-%m-%d %H:%M:%S')" >> $GITHUB_ENV

      # --------------------------
      # 步骤5：运行Python脚本（关键修改点）
      # --------------------------      
      - name: 运行 Python 脚本
        id: run_script
        run: |
          # 捕获输出并去除换行符
          output=$(python v2cross/update.py 2>&1 | tr -d '\n')
          exit_code=$?
          
          # 调试输出
          echo "脚本原始输出：[${output}]"
          echo "退出码：$exit_code"
          
          # 设置多环境变量
          if [ $exit_code -ne 0 ]; then
            echo "script_status=failure" >> $GITHUB_OUTPUT
            echo "error_message=$output" >> $GITHUB_OUTPUT
          else
            echo "DYNAMIC_URL=${output}" | tee -a $GITHUB_ENV  # 同时写入环境变量
            echo "script_status=success" >> $GITHUB_OUTPUT
            echo "DYNAMIC_URL=${output}" >> $GITHUB_OUTPUT
          fi

      # --------------------------
      # 步骤6：脚本状态检查（保持原样）
      # --------------------------      
      - name: 检查脚本状态
        id: check_script
        run: |
          if [ "${{ steps.run_script.outputs.script_status }}" == "failure" ]; then
            echo "send_email=true" >> $GITHUB_OUTPUT
            echo "error_type=脚本运行失败" >> $GITHUB_OUTPUT
          else
            echo "send_email=false" >> $GITHUB_OUTPUT
          fi

      # --------------------------
      # 步骤7：创建存储目录（保持原样）
      # --------------------------
      - name: Create v2cross directory
        run: mkdir -p v2cross

      # --------------------------
      # 步骤8：下载订阅文件（关键修改点）
      # --------------------------
      - name: 下载订阅文件并检查
        id: fetch-content
        env:
          DYNAMIC_URL: ${{ steps.run_script.outputs.DYNAMIC_URL }}  # 从步骤输出获取
        run: |
          echo "正在下载订阅文件：$DYNAMIC_URL"
          
          # 带重试机制的下载
          if ! curl -L -H "Cache-Control: no-cache" -o v2cross/output.yaml "$DYNAMIC_URL"; then
            echo "FETCH_ERROR=true" >> $GITHUB_OUTPUT
            echo "错误：文件下载失败" >&2
            exit 1
          fi
          
          # 文件完整性校验
          if [ ! -s v2cross/output.yaml ]; then
            echo "FETCH_ERROR=true" >> $GITHUB_OUTPUT
            echo "错误：下载文件为空" >&2
            exit 1
          fi
          
          # 添加文件到Git
          git add v2cross/output.yaml
          echo "文件已暂存"

      # --------------------------
      # 步骤9：检测文件变更（关键逻辑）
      # --------------------------
      - name: 检测文件变更
        id: check-changes
        run: |
          # 显示详细变更状态（调试用）
          git status --porcelain
          
          # 核心检测逻辑：比对暂存区与仓库差异
          if git diff --staged --quiet; then
            # 无变化时设置标记
            echo "HAS_CHANGES=false" >> $GITHUB_OUTPUT
            echo "文件未变化"
          else
            # 检测到变化时设置标记
            echo "HAS_CHANGES=true" >> $GITHUB_OUTPUT
            echo "检测到变更"
          fi

      # --------------------------
      # 步骤10：提交变更（条件执行）
      # --------------------------
      - name: 提交变更
        # 仅当检测到变化时执行
        if: steps.check-changes.outputs.HAS_CHANGES == 'true'
        run: |
          # 配置git用户信息（必需字段）
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          # 提交信息包含北京时间戳
          git commit -m "${{ env.CURRENT_DATE }} - Update from $DYNAMIC_URL (at https://v2cross.com/1884.html)"
          
          # 推送到远程仓库（使用GITHUB_TOKEN自动鉴权）
          git push

      # --------------------------
      # 步骤11：异常通知（综合判断）
      # --------------------------
      - name: Notify on failure
        # 触发条件：任何失败/下载错误/无内容变化
        if: ${{ failure() || steps.fetch-content.outputs.FETCH_ERROR == 'true' || steps.check_content.outputs.send_email == 'false' || steps.check-changes.outputs.HAS_CHANGES == 'false' }}
        uses: dawidd6/action-send-mail@v3
        with:
          # SMTP服务器配置（163邮箱示例）
          server_address: smtp.163.com
          server_port: 465
          # 认证信息（需在仓库Secrets中设置）
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          
          # 邮件主题（含时间戳）
          subject: "v2cross更新出错 ${{ env.CURRENT_DATE }}"
          
          # 邮件正文模板（使用管道符保持格式）
          body: |
            详情报告：
            - 时间: ${{ env.CURRENT_DATE }}
            - 脚本版本: 1.0
            - 订阅URL: ${{ env.DYNAMIC_URL }} from https://v2cross.com/1884.html
            - 日志链接: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
            - 错误类型: ${{ steps.fetch-content.outputs.FETCH_ERROR && '下载失败' || steps.check_content.outputs.send_email == 'false' && '脚本运行失败' || steps.check-changes.outputs.HAS_CHANGES == 'false' && '内容未变' || '其他错误' }}

          # 收件人配置
          to: lyqnihao@163.com
          from: ${{ secrets.EMAIL_USERNAME }}
          
          # 内容类型设置为纯文本
          content_type: text/plain
